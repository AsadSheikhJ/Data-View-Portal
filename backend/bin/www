#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('backend:server');
var http = require('http');
var net = require('net');
const initializeFileSystem = require('../db/init');

/**
 * Function to check if a port is in use
 */
function isPortInUse(port) {
  return new Promise((resolve) => {
    const server = net.createServer();
    
    server.once('error', (err) => {
      if (err.code === 'EADDRINUSE') {
        resolve(true);
      } else {
        resolve(false);
      }
      server.close();
    });
    
    server.once('listening', () => {
      server.close();
      resolve(false);
    });
    
    server.listen(port);
  });
}

/**
 * Find an available port starting from the specified one
 */
async function findAvailablePort(startPort) {
  let port = startPort;
  while (await isPortInUse(port)) {
    console.log(`Port ${port} is in use, trying next port...`);
    port++;
  }
  return port;
}

/**
 * Get port from environment and store in Express.
 * Will find an available port if the specified one is in use.
 */
async function setupServer() {
  var initialPort = normalizePort(process.env.PORT || '5000');
  var port = await findAvailablePort(initialPort);
  
  if (initialPort !== port) {
    console.log(`Port ${initialPort} was in use, using port ${port} instead.`);
  }
  
  app.set('port', port);

  /**
   * Create HTTP server.
   */

  var server = http.createServer(app);

  // Add startup message
  console.log(`Starting server on port ${port}...`);

  // Initialize file system storage
  initializeFileSystem();

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port, '0.0.0.0');
  server.on('error', onError);
  server.on('listening', function() {
      onListening();
      
      // Use our dedicated network info utility for better information display
      const networkInfo = require('../utils/networkInfo');
      networkInfo.printAccessUrls(port);
  });

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

// Start the server setup process
setupServer().catch(err => {
  console.error('Failed to start server:', err);
  process.exit(1);
});
